<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:musicPlayer.properties"/>

    <!--    Жизненный цикл бина (Bean Lifecycle):
    1. Вы запускаете Spring приложение
    2. Запускается Spring контейнер
    3. Создается обьект бина
    4. В бин внедряются зависимости (Dependency Injection)
    5. Вызывается указанный init-method
    6. Бин готов к использованию (использование бина)
    7. Вызывается указанный destroy-method
    8. Остановка Spring приложения

    Init-method - метод, который запускается в ходе инициализации бина.
    Иициализация ресурсов, обращение к внешним файлам, запуск БД

    Destroy-method - метод, который запускается в ходе уничтожения бина (при завершении приложения).
    Очищение ресурсов, закрытие потоков ввода-ввывода, закрытие доступа к БД

    Эти два метода создаются в классе бина. Spring будет вызывать эти методы в нужный момент времени

    Тонкости init и destroy методов:
    Модифкаторы доступа: может быть любой - public, protected, private
    Тип возращаемого значения: может быть любой, но чаще используется void
    (нет возможности получить возращаемое значение - так как Spring вызывает ети значения, а не мы)
    Название метода: может быть любым
    Аргументы метода: эти методы не должны принимать на вход какие либо аргументы

    Для бинов со scope "prototype" Spring не вызывает destroy метод
    Spring не берет на себя полный жизненный цикл бинов со scope "prototype".
    Spring отдает prototype бины клиенту и больше о них не заботится (в отличии от singleton бинов)
    -->

    <bean id="musicBean"
          class="ua.max.springcourse.ClassicalMusic"
          init-method="doMyInit"
          destroy-method="doMyDestroy">
    </bean>

<!--    <bean id="musicPlayer"-->
<!--          class="ua.max.springcourse.MusicPlayer"-->
<!--          scope="prototype">-->
<!--        <property name="musicList" ref="musicBean"/>-->

<!--        <property name="name" value="${musicPlayer.name}"/>-->
<!--        <property name="volume" value="${musicPlayer.volume}"/>-->
<!--    </bean>-->

</beans>
